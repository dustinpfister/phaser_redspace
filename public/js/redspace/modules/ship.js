
// ship module for the player ship
var Ship = (function () {

    var api = {};

    // basic options defaults helper
    var optionBasicDefaults = function (opt) {

        opt = opt || {};
        opt.game = opt.game || game;

        return opt;

    };

    // make the sheet for the player ship
    api.mkSheet = function (opt) {

        opt = optionBasicDefaults(opt);

        // sprite sheet generated by canvas
        var canvas = document.createElement('canvas'),
        ctx = canvas.getContext('2d');
        canvas.width = 32;
        canvas.height = 32;

        // blue ship
        ctx.fillStyle = '#00ffff';
        ctx.strokeStyle = '#0000ff';
        ctx.lineWidth = 3;
        ctx.beginPath();
        /*
        ctx.moveTo(15, 2);
        ctx.lineTo(30, 30);
        ctx.lineTo(2, 30)*/

        ctx.moveTo(30, 15);
        ctx.lineTo(2, 2);
        ctx.lineTo(2, 30);

        ctx.closePath();
        ctx.fill();
        ctx.stroke();

        game.cache.addSpriteSheet('sheet-ship', null, canvas, 32, 32, 1, 0, 0);

    };

    // create a single ship
    api.createShip = function (opt) {

        opt = optionBasicDefaults(opt),
        keyboard = game.input.keyboard,
        game = opt.game;

        // create ship sprite
        var ship = this.ship = game.add.sprite(game.canvas.width / 2, game.canvas.height / 2, 'sheet-ship');
        ship.name = 'ship_player';
        ship.anchor.set(0.5, 0.5);

        ship.data.thrust = 0;

        // follow the camera
        game.camera.follow(ship);

        // physics
        game.physics.p2.enable(ship);
        ship.body.angularDamping = .75;

        // up
        keyboard.addKey(38).onDown.add(function () {

            ship.data.thrust += 0.25;

        });

        // down
        keyboard.addKey(40).onDown.add(function () {

            ship.data.thrust -= 0.25;

        });

    };

    // what to do for each frame tick
    api.tick = function (game) {

        var ship = this.ship,
        keyboard = game.input.keyboard;

        // left
        if (keyboard.isDown(37)) {
            //ship.body.velocity.x += -20;
            ship.body.angularVelocity -= 0.05;
        }
        // right
        if (keyboard.isDown(39)) {
            //ship.body.velocity.x += 20;
            ship.body.angularVelocity += 0.05;
        }
        /*
        // up
        if (keyboard.isDown(38)) {
        ship.data.thrust += 1;
        //ship.body.velocity.y += -20;
        }
        //down
        if (keyboard.isDown(40)) {
        ship.data.thrust -= 1;
        //ship.body.velocity.y += 20;
        }
         */

        // thrust limit
        ship.data.thrust = Phaser.Math.clamp(ship.data.thrust, -5, 5);

        ship.body.velocity.x += Math.cos(ship.angle / 180 * Math.PI) * ship.data.thrust;
        ship.body.velocity.y += Math.sin(ship.angle / 180 * Math.PI) * ship.data.thrust;

        // speed limit
        ship.body.velocity.x = Phaser.Math.clamp(ship.body.velocity.x, -100, 100);
        ship.body.velocity.y = Phaser.Math.clamp(ship.body.velocity.y, -100, 100);

        // angular velocity limit
        ship.body.angularVelocity = Phaser.Math.clamp(ship.body.angularVelocity, -2.5, 2.5);

    };

    return api;

}
    ());
